import java.nio.channels.FileChannel
import java.nio.file.Files

plugins {
	id 'org.openjfx.javafxplugin' version '0.0.7'
}

dependencies {
	implementation project(':api')
}

javafx {

	modules = [ 'javafx.controls', 'javafx.web', 'javafx.fxml', 'javafx.base', 'javafx.media', 'javafx.graphics' ]
	mainClass = 'com.squedgy.mcmodmanager.app.Startup'
}

def fxModules = new LinkedList<File>()

jar {
	logger.lifecycle(this.properties.mainClass)
	manifest {
		attributes(
			'Main-Class': this.properties.get("mainClass")
		)
	}

	from{
		def ret = configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
		return ret
	} exclude {
		'*javafx*'
	}

	doLast {
		logger.lifecycle(fxModules.toString())
		configurations.runtimeClasspath.filter {
			it.name.contains("javafx")
		}.each {
			logger.lifecycle('44: ' + it.getAbsolutePath())
			logger.lifecycle('45: ' + project.projectDir.toPath().resolve('build/libs/resource').toFile().absolutePath)
			def outDir = project.projectDir.toPath().resolve('build/libs/resource')
			if(!outDir.toFile().exists()) {
				outDir.toFile().mkdirs()
			}
			FileChannel source = new FileInputStream(it).getChannel()
			FileChannel out = new FileOutputStream(outDir.resolve(it.name).toFile()).getChannel()
			out.transferFrom(source, 0, source.size())
		}
	}

}

task afterJar(type: Zip){
	dependsOn 'build'
	from 'build/libs'
	include '*.jar'
	from'../'
	include 'LICENSE.txt'
	archiveName 'manager-latest.zip'
	destinationDir file('build/release/')
}

task Release{
	dependsOn "afterJar"
	def release = this.properties.releaseDir + "manager-latest.zip"
	def project = "build/release/manager-latest.zip"
	if(file(project).exists()) {
		if(file(release).exists()){
			def oldVersion = ""
			def entry = zipTree(release)
			for(File f : entry.files){
				if(f.getName().endsWith(".jar")){
					def jar = f.getName().substring(0,f.getName().length()-".jar".length()).split("[-]")
					oldVersion = jar[jar.length -1]
				}
			}
			println oldVersion
			println this.properties.releaseDir + "manager-" + oldVersion + ".zip"
			Files.move(file(this.properties.releaseDir + "manager-latest.zip").toPath(), file(this.properties.releaseDir + "manager-" + oldVersion + ".zip").toPath())
		}
		Files.move(file(project).toPath(), file(release).toPath())
	}
}
