import java.nio.file.Files

buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
	}
}

plugins {
}

apply plugin: 'javafx-gradle-plugin'
logger.lifecycle(System.getenv().JAVA_HOME)
jfx {

}

dependencies {
	compile project(':api')
	compile group: 'com.squedgy', name: 'my-utilities', version: '1.0'
}

jar {
	dependsOn ':api:jar'
	println this.properties.get("mainClass")
	manifest {
		attributes(
			'Main-Class': this.properties.get("mainClass")
		)
	}

	from{
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

}

task afterJar(type: Zip){
	dependsOn 'build'
	from 'build/libs'
	include '*.jar'
	from'../'
	include 'LICENSE.txt'
	archiveName 'manager-latest.zip'
	destinationDir file('build/release/')
}

task Release{
	dependsOn "afterJar"
	def release = this.properties.releaseDir + "manager-latest.zip"
	def project = "build/release/manager-latest.zip"
	if(file(project).exists()) {
		if(file(release).exists()){
			def oldVersion = ""
			def entry = zipTree(release)
			for(File f : entry.files){
				if(f.getName().endsWith(".jar")){
					def jar = f.getName().substring(0,f.getName().length()-".jar".length()).split("[-]")
					oldVersion = jar[jar.length -1]
				}
			}
			println oldVersion
			println this.properties.releaseDir + "manager-" + oldVersion + ".zip"
			Files.move(file(this.properties.releaseDir + "manager-latest.zip").toPath(), file(this.properties.releaseDir + "manager-" + oldVersion + ".zip").toPath())
		}
		Files.move(file(project).toPath(), file(release).toPath())
	}
}

jfx {
	mainClass = "com.squedgy.mcmodmanager.app.Startup"

	vendor = "SquEdgy"
}